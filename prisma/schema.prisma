// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    userHash      String
    karma         Int       @default(0)
    isBanned      Boolean   @default(false)
    dateCreated   DateTime  @default(now())
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    Vote          Vote[]
    Review        Review[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Beginning of odrs tables

// model Analytics {
//     datestr   Int    @id @default(0)
//     app_id    String @id
//     fetch_cnt Int    @default(1)
// }

model Taboo {
    id          Int     @id @unique
    locale      String
    value       String
    description String?
    severity    Int     @default(0)
}

model Vote {
    id          Int      @id @unique
    dateCreated DateTime @default(now())
    reviewId    Int?
    review      Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    userId      Int?
    user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    val         Int      @default(0)
}

model Component {
    id                  Int         @id @unique
    componentIdParentId Int
    parent              Component   @relation(fields: [componentIdParentId], references: [id], onDelete: Cascade)
    appId               String
    FetchCnt            Int         @default(0)
    ReviewCnt           Int         @default(1)
    Component           Component[]
    Review              Review[]
}

model Review {
    id           Int       @id @unique
    dateCreated  DateTime  @default(now())
    dateDeleted  DateTime?
    componentId  Int
    component    Component @relation(fields: [componentId], references: [id], onDelete: Cascade)
    locale       String
    sumary       String
    description  String
    userId       Int?
    user         User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
    userAddrHash String
    userDisplay  String
    version      String
    distro       String
    rating       Int       @default(0)
    karmaUp      Int       @default(0)
    karmaDown    Int       @default(0)
    reported     Int       @default(0)

    Vote Vote[]
}
